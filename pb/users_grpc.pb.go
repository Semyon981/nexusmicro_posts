// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: users.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Users_GetUsersByIds_FullMethodName        = "/Users/GetUsersByIds"
	Users_GetUserById_FullMethodName          = "/Users/GetUserById"
	Users_GetAuthUser_FullMethodName          = "/Users/GetAuthUser"
	Users_GetUsersList_FullMethodName         = "/Users/GetUsersList"
	Users_UpdateInfo_FullMethodName           = "/Users/UpdateInfo"
	Users_UpdatePhoto_FullMethodName          = "/Users/UpdatePhoto"
	Users_UpdateTags_FullMethodName           = "/Users/UpdateTags"
	Users_GetTags_FullMethodName              = "/Users/GetTags"
	Users_SignUp_FullMethodName               = "/Users/SignUp"
	Users_SignIn_FullMethodName               = "/Users/SignIn"
	Users_SignUpByPhone_FullMethodName        = "/Users/SignUpByPhone"
	Users_SignUpByPhoneConfirm_FullMethodName = "/Users/SignUpByPhoneConfirm"
	Users_RefreshToken_FullMethodName         = "/Users/RefreshToken"
	Users_ChangePassword_FullMethodName       = "/Users/ChangePassword"
	Users_VerifyPhone_FullMethodName          = "/Users/VerifyPhone"
	Users_VerifyPhoneConfirm_FullMethodName   = "/Users/VerifyPhoneConfirm"
	Users_SubscribeOnUser_FullMethodName      = "/Users/SubscribeOnUser"
	Users_UnsubscribeOnUser_FullMethodName    = "/Users/UnsubscribeOnUser"
	Users_GetSubscriptionsList_FullMethodName = "/Users/GetSubscriptionsList"
	Users_GetSubscribersList_FullMethodName   = "/Users/GetSubscribersList"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	// GetUsersByIds
	//
	// Возвращает список пользователей по иx id. Если ids не заданы, возвращает аутентифицированного пользователя.
	GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, opts ...grpc.CallOption) (*GetUsersByIdsResponse, error)
	// GetUserById
	//
	// Возвращает пользователя по его id. Если id не задан, возвращает аутентифицированного пользователя.
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
	// GetAuthUser
	//
	// Возвращает аутентифицированного пользователя.
	GetAuthUser(ctx context.Context, in *GetAuthUserRequest, opts ...grpc.CallOption) (*GetAuthUserResponse, error)
	// GetUsersList
	//
	// Возвращает список всех пользователей. Отсортирован по дате регистрации. Сначала новые.
	GetUsersList(ctx context.Context, in *GetUsersListRequest, opts ...grpc.CallOption) (*GetUsersListResponse, error)
	// UpdateInfo
	//
	// Изменяет основную информацию профиля.
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoResponse, error)
	// UpdatePhoto
	//
	// Изменяет фотографию профиля.
	UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, opts ...grpc.CallOption) (*UpdatePhotoResponse, error)
	// UpdateTags
	//
	// Изменяет теги профиля.
	UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*UpdateTagsResponse, error)
	// GetTags
	//
	// Возвращает список всех тегов. Отсортирован по популярности. Сначала популярные.
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	// SignUp
	//
	// Регистрирует нового пользователя.
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	// SignIn
	//
	// Обменивает номер телефона и пароль на токен и рефреш токен.
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// SignUpByPhone
	//
	// Регистрирует нового пользователя.
	SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, opts ...grpc.CallOption) (*SignUpByPhoneResponse, error)
	// SignUpByPhoneConfirm
	//
	// Регистрирует нового пользователя.
	SignUpByPhoneConfirm(ctx context.Context, in *SignUpByPhoneConfirmRequest, opts ...grpc.CallOption) (*SignUpByPhoneConfirmResponse, error)
	// RefreshToken
	//
	// Обновляет токен c помощью рефреш токена.
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// ChangePassword
	//
	// Изменяет пароль пользователя.
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// VerifyPhone
	//
	// Отправляет код подтверждения на указанный телефон. Чтобы подтвердить номер, нужно сделать запрос на VerifyPhoneConfirm.
	VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error)
	// VerifyPhoneConfirm
	//
	// Подтверждает номер телефона. Возвращает verify_token.
	VerifyPhoneConfirm(ctx context.Context, in *VerifyPhoneConfirmRequest, opts ...grpc.CallOption) (*VerifyPhoneConfirmResponse, error)
	// SubscribeOnUser
	//
	// Подписаться на пользователя
	SubscribeOnUser(ctx context.Context, in *SubscribeOnUserRequest, opts ...grpc.CallOption) (*SubscribeOnUserResponse, error)
	// UnsubscribeOnUser
	//
	// Отписаться от пользователя
	UnsubscribeOnUser(ctx context.Context, in *UnsubscribeOnUserRequest, opts ...grpc.CallOption) (*UnsubscribeOnUserResponse, error)
	// GetSubscriptionsList
	//
	// Возвращает список пользователей на которых подписан текущий пользователь. (Не реализовано)
	GetSubscriptionsList(ctx context.Context, in *GetSubscriptionsListRequest, opts ...grpc.CallOption) (*GetSubscriptionsListResponse, error)
	// GetSubscriptionsList
	//
	// Возвращает список подписчиков текущего пользователя. (Не реализовано)
	GetSubscribersList(ctx context.Context, in *GetSubscribersListRequest, opts ...grpc.CallOption) (*GetSubscribersListResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) GetUsersByIds(ctx context.Context, in *GetUsersByIdsRequest, opts ...grpc.CallOption) (*GetUsersByIdsResponse, error) {
	out := new(GetUsersByIdsResponse)
	err := c.cc.Invoke(ctx, Users_GetUsersByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	out := new(GetUserByIdResponse)
	err := c.cc.Invoke(ctx, Users_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetAuthUser(ctx context.Context, in *GetAuthUserRequest, opts ...grpc.CallOption) (*GetAuthUserResponse, error) {
	out := new(GetAuthUserResponse)
	err := c.cc.Invoke(ctx, Users_GetAuthUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersList(ctx context.Context, in *GetUsersListRequest, opts ...grpc.CallOption) (*GetUsersListResponse, error) {
	out := new(GetUsersListResponse)
	err := c.cc.Invoke(ctx, Users_GetUsersList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoResponse, error) {
	out := new(UpdateInfoResponse)
	err := c.cc.Invoke(ctx, Users_UpdateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, opts ...grpc.CallOption) (*UpdatePhotoResponse, error) {
	out := new(UpdatePhotoResponse)
	err := c.cc.Invoke(ctx, Users_UpdatePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*UpdateTagsResponse, error) {
	out := new(UpdateTagsResponse)
	err := c.cc.Invoke(ctx, Users_UpdateTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, Users_GetTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, Users_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, Users_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, opts ...grpc.CallOption) (*SignUpByPhoneResponse, error) {
	out := new(SignUpByPhoneResponse)
	err := c.cc.Invoke(ctx, Users_SignUpByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SignUpByPhoneConfirm(ctx context.Context, in *SignUpByPhoneConfirmRequest, opts ...grpc.CallOption) (*SignUpByPhoneConfirmResponse, error) {
	out := new(SignUpByPhoneConfirmResponse)
	err := c.cc.Invoke(ctx, Users_SignUpByPhoneConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, Users_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, Users_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error) {
	out := new(VerifyPhoneResponse)
	err := c.cc.Invoke(ctx, Users_VerifyPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) VerifyPhoneConfirm(ctx context.Context, in *VerifyPhoneConfirmRequest, opts ...grpc.CallOption) (*VerifyPhoneConfirmResponse, error) {
	out := new(VerifyPhoneConfirmResponse)
	err := c.cc.Invoke(ctx, Users_VerifyPhoneConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SubscribeOnUser(ctx context.Context, in *SubscribeOnUserRequest, opts ...grpc.CallOption) (*SubscribeOnUserResponse, error) {
	out := new(SubscribeOnUserResponse)
	err := c.cc.Invoke(ctx, Users_SubscribeOnUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UnsubscribeOnUser(ctx context.Context, in *UnsubscribeOnUserRequest, opts ...grpc.CallOption) (*UnsubscribeOnUserResponse, error) {
	out := new(UnsubscribeOnUserResponse)
	err := c.cc.Invoke(ctx, Users_UnsubscribeOnUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetSubscriptionsList(ctx context.Context, in *GetSubscriptionsListRequest, opts ...grpc.CallOption) (*GetSubscriptionsListResponse, error) {
	out := new(GetSubscriptionsListResponse)
	err := c.cc.Invoke(ctx, Users_GetSubscriptionsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetSubscribersList(ctx context.Context, in *GetSubscribersListRequest, opts ...grpc.CallOption) (*GetSubscribersListResponse, error) {
	out := new(GetSubscribersListResponse)
	err := c.cc.Invoke(ctx, Users_GetSubscribersList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations should embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	// GetUsersByIds
	//
	// Возвращает список пользователей по иx id. Если ids не заданы, возвращает аутентифицированного пользователя.
	GetUsersByIds(context.Context, *GetUsersByIdsRequest) (*GetUsersByIdsResponse, error)
	// GetUserById
	//
	// Возвращает пользователя по его id. Если id не задан, возвращает аутентифицированного пользователя.
	GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error)
	// GetAuthUser
	//
	// Возвращает аутентифицированного пользователя.
	GetAuthUser(context.Context, *GetAuthUserRequest) (*GetAuthUserResponse, error)
	// GetUsersList
	//
	// Возвращает список всех пользователей. Отсортирован по дате регистрации. Сначала новые.
	GetUsersList(context.Context, *GetUsersListRequest) (*GetUsersListResponse, error)
	// UpdateInfo
	//
	// Изменяет основную информацию профиля.
	UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoResponse, error)
	// UpdatePhoto
	//
	// Изменяет фотографию профиля.
	UpdatePhoto(context.Context, *UpdatePhotoRequest) (*UpdatePhotoResponse, error)
	// UpdateTags
	//
	// Изменяет теги профиля.
	UpdateTags(context.Context, *UpdateTagsRequest) (*UpdateTagsResponse, error)
	// GetTags
	//
	// Возвращает список всех тегов. Отсортирован по популярности. Сначала популярные.
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	// SignUp
	//
	// Регистрирует нового пользователя.
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	// SignIn
	//
	// Обменивает номер телефона и пароль на токен и рефреш токен.
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// SignUpByPhone
	//
	// Регистрирует нового пользователя.
	SignUpByPhone(context.Context, *SignUpByPhoneRequest) (*SignUpByPhoneResponse, error)
	// SignUpByPhoneConfirm
	//
	// Регистрирует нового пользователя.
	SignUpByPhoneConfirm(context.Context, *SignUpByPhoneConfirmRequest) (*SignUpByPhoneConfirmResponse, error)
	// RefreshToken
	//
	// Обновляет токен c помощью рефреш токена.
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// ChangePassword
	//
	// Изменяет пароль пользователя.
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// VerifyPhone
	//
	// Отправляет код подтверждения на указанный телефон. Чтобы подтвердить номер, нужно сделать запрос на VerifyPhoneConfirm.
	VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error)
	// VerifyPhoneConfirm
	//
	// Подтверждает номер телефона. Возвращает verify_token.
	VerifyPhoneConfirm(context.Context, *VerifyPhoneConfirmRequest) (*VerifyPhoneConfirmResponse, error)
	// SubscribeOnUser
	//
	// Подписаться на пользователя
	SubscribeOnUser(context.Context, *SubscribeOnUserRequest) (*SubscribeOnUserResponse, error)
	// UnsubscribeOnUser
	//
	// Отписаться от пользователя
	UnsubscribeOnUser(context.Context, *UnsubscribeOnUserRequest) (*UnsubscribeOnUserResponse, error)
	// GetSubscriptionsList
	//
	// Возвращает список пользователей на которых подписан текущий пользователь. (Не реализовано)
	GetSubscriptionsList(context.Context, *GetSubscriptionsListRequest) (*GetSubscriptionsListResponse, error)
	// GetSubscriptionsList
	//
	// Возвращает список подписчиков текущего пользователя. (Не реализовано)
	GetSubscribersList(context.Context, *GetSubscribersListRequest) (*GetSubscribersListResponse, error)
}

// UnimplementedUsersServer should be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) GetUsersByIds(context.Context, *GetUsersByIdsRequest) (*GetUsersByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByIds not implemented")
}
func (UnimplementedUsersServer) GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUsersServer) GetAuthUser(context.Context, *GetAuthUserRequest) (*GetAuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthUser not implemented")
}
func (UnimplementedUsersServer) GetUsersList(context.Context, *GetUsersListRequest) (*GetUsersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersList not implemented")
}
func (UnimplementedUsersServer) UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedUsersServer) UpdatePhoto(context.Context, *UpdatePhotoRequest) (*UpdatePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoto not implemented")
}
func (UnimplementedUsersServer) UpdateTags(context.Context, *UpdateTagsRequest) (*UpdateTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTags not implemented")
}
func (UnimplementedUsersServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedUsersServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUsersServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUsersServer) SignUpByPhone(context.Context, *SignUpByPhoneRequest) (*SignUpByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpByPhone not implemented")
}
func (UnimplementedUsersServer) SignUpByPhoneConfirm(context.Context, *SignUpByPhoneConfirmRequest) (*SignUpByPhoneConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpByPhoneConfirm not implemented")
}
func (UnimplementedUsersServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedUsersServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUsersServer) VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedUsersServer) VerifyPhoneConfirm(context.Context, *VerifyPhoneConfirmRequest) (*VerifyPhoneConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhoneConfirm not implemented")
}
func (UnimplementedUsersServer) SubscribeOnUser(context.Context, *SubscribeOnUserRequest) (*SubscribeOnUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeOnUser not implemented")
}
func (UnimplementedUsersServer) UnsubscribeOnUser(context.Context, *UnsubscribeOnUserRequest) (*UnsubscribeOnUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeOnUser not implemented")
}
func (UnimplementedUsersServer) GetSubscriptionsList(context.Context, *GetSubscriptionsListRequest) (*GetSubscriptionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionsList not implemented")
}
func (UnimplementedUsersServer) GetSubscribersList(context.Context, *GetSubscribersListRequest) (*GetSubscribersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribersList not implemented")
}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_GetUsersByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUsersByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersByIds(ctx, req.(*GetUsersByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetAuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetAuthUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAuthUser(ctx, req.(*GetAuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUsersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersList(ctx, req.(*GetUsersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateInfo(ctx, req.(*UpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdatePhoto(ctx, req.(*UpdatePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateTags(ctx, req.(*UpdateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SignUpByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SignUpByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SignUpByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SignUpByPhone(ctx, req.(*SignUpByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SignUpByPhoneConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpByPhoneConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SignUpByPhoneConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SignUpByPhoneConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SignUpByPhoneConfirm(ctx, req.(*SignUpByPhoneConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_VerifyPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).VerifyPhone(ctx, req.(*VerifyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_VerifyPhoneConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).VerifyPhoneConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_VerifyPhoneConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).VerifyPhoneConfirm(ctx, req.(*VerifyPhoneConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SubscribeOnUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeOnUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SubscribeOnUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_SubscribeOnUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SubscribeOnUser(ctx, req.(*SubscribeOnUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UnsubscribeOnUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeOnUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UnsubscribeOnUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UnsubscribeOnUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UnsubscribeOnUser(ctx, req.(*UnsubscribeOnUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetSubscriptionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetSubscriptionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetSubscriptionsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetSubscriptionsList(ctx, req.(*GetSubscriptionsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetSubscribersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetSubscribersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetSubscribersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetSubscribersList(ctx, req.(*GetSubscribersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersByIds",
			Handler:    _Users_GetUsersByIds_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Users_GetUserById_Handler,
		},
		{
			MethodName: "GetAuthUser",
			Handler:    _Users_GetAuthUser_Handler,
		},
		{
			MethodName: "GetUsersList",
			Handler:    _Users_GetUsersList_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _Users_UpdateInfo_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _Users_UpdatePhoto_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _Users_UpdateTags_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _Users_GetTags_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Users_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Users_SignIn_Handler,
		},
		{
			MethodName: "SignUpByPhone",
			Handler:    _Users_SignUpByPhone_Handler,
		},
		{
			MethodName: "SignUpByPhoneConfirm",
			Handler:    _Users_SignUpByPhoneConfirm_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Users_RefreshToken_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Users_ChangePassword_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _Users_VerifyPhone_Handler,
		},
		{
			MethodName: "VerifyPhoneConfirm",
			Handler:    _Users_VerifyPhoneConfirm_Handler,
		},
		{
			MethodName: "SubscribeOnUser",
			Handler:    _Users_SubscribeOnUser_Handler,
		},
		{
			MethodName: "UnsubscribeOnUser",
			Handler:    _Users_UnsubscribeOnUser_Handler,
		},
		{
			MethodName: "GetSubscriptionsList",
			Handler:    _Users_GetSubscriptionsList_Handler,
		},
		{
			MethodName: "GetSubscribersList",
			Handler:    _Users_GetSubscribersList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
