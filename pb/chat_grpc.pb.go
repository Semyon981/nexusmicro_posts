// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatRpc_GetChats_FullMethodName                 = "/ChatRpc/GetChats"
	ChatRpc_LoadChatByChatId_FullMethodName         = "/ChatRpc/LoadChatByChatId"
	ChatRpc_LoadMoreChats_FullMethodName            = "/ChatRpc/LoadMoreChats"
	ChatRpc_LoadMoreMessagesByChatId_FullMethodName = "/ChatRpc/LoadMoreMessagesByChatId"
	ChatRpc_SubToMessagesByChatId_FullMethodName    = "/ChatRpc/SubToMessagesByChatId"
	ChatRpc_SubToChats_FullMethodName               = "/ChatRpc/SubToChats"
	ChatRpc_WriteMessageByChatId_FullMethodName     = "/ChatRpc/WriteMessageByChatId"
	ChatRpc_DeleteMessageByChatId_FullMethodName    = "/ChatRpc/DeleteMessageByChatId"
)

// ChatRpcClient is the client API for ChatRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRpcClient interface {
	// GetChats
	//
	// Возвращает список чатов, которые есть у пользователя
	GetChats(ctx context.Context, in *GetChatsRequest, opts ...grpc.CallOption) (*GetChatsResponse, error)
	// LoadChatByChatId
	//
	// Возвращает чат по id чата
	LoadChatByChatId(ctx context.Context, in *LoadChatByChatIdRequest, opts ...grpc.CallOption) (*LoadChatByChatIdResponse, error)
	// LoadMoreChats
	//
	// Загружает больше чатов, если надо, может загружать как вверх так и вниз
	LoadMoreChats(ctx context.Context, in *LoadMoreChatsRequest, opts ...grpc.CallOption) (*LoadMoreChatsResponse, error)
	// LoadMoreMessagesByChatId
	//
	// Загружает больше сообщений если надо, может загружать сообщения вверх и вниз
	LoadMoreMessagesByChatId(ctx context.Context, in *LoadMoreMessagesByChatIdRequest, opts ...grpc.CallOption) (*LoadMoreMessagesByChatIdResponse, error)
	// SubToMessages
	//
	// Подписывается на обновления сообщений, в ответе возвращаются значения значения сообщений которые
	// новые и могут быть получены новым пользовтелем
	SubToMessagesByChatId(ctx context.Context, in *SubToMessagesByChatIdRequest, opts ...grpc.CallOption) (ChatRpc_SubToMessagesByChatIdClient, error)
	// SubToChats
	//
	// Подписывается на обновление чатов, в ответе возвращается статистика по чатам и последнее сообщение, которое надо
	// отобразить, а также количество не прочитанных сообщений
	SubToChats(ctx context.Context, in *SubToChatsRequest, opts ...grpc.CallOption) (ChatRpc_SubToChatsClient, error)
	// WriteMessageByChatId
	//
	// Написать сообщение
	WriteMessageByChatId(ctx context.Context, in *WriteMessageByChatIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteMessageByChatId
	//
	// Удалить сообщение (удаляет сообщение у всех, восстановить нельзя)
	DeleteMessageByChatId(ctx context.Context, in *DeleteMessageByChatIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chatRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRpcClient(cc grpc.ClientConnInterface) ChatRpcClient {
	return &chatRpcClient{cc}
}

func (c *chatRpcClient) GetChats(ctx context.Context, in *GetChatsRequest, opts ...grpc.CallOption) (*GetChatsResponse, error) {
	out := new(GetChatsResponse)
	err := c.cc.Invoke(ctx, ChatRpc_GetChats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) LoadChatByChatId(ctx context.Context, in *LoadChatByChatIdRequest, opts ...grpc.CallOption) (*LoadChatByChatIdResponse, error) {
	out := new(LoadChatByChatIdResponse)
	err := c.cc.Invoke(ctx, ChatRpc_LoadChatByChatId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) LoadMoreChats(ctx context.Context, in *LoadMoreChatsRequest, opts ...grpc.CallOption) (*LoadMoreChatsResponse, error) {
	out := new(LoadMoreChatsResponse)
	err := c.cc.Invoke(ctx, ChatRpc_LoadMoreChats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) LoadMoreMessagesByChatId(ctx context.Context, in *LoadMoreMessagesByChatIdRequest, opts ...grpc.CallOption) (*LoadMoreMessagesByChatIdResponse, error) {
	out := new(LoadMoreMessagesByChatIdResponse)
	err := c.cc.Invoke(ctx, ChatRpc_LoadMoreMessagesByChatId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) SubToMessagesByChatId(ctx context.Context, in *SubToMessagesByChatIdRequest, opts ...grpc.CallOption) (ChatRpc_SubToMessagesByChatIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatRpc_ServiceDesc.Streams[0], ChatRpc_SubToMessagesByChatId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRpcSubToMessagesByChatIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatRpc_SubToMessagesByChatIdClient interface {
	Recv() (*SubToMessagesByChatIdResponse, error)
	grpc.ClientStream
}

type chatRpcSubToMessagesByChatIdClient struct {
	grpc.ClientStream
}

func (x *chatRpcSubToMessagesByChatIdClient) Recv() (*SubToMessagesByChatIdResponse, error) {
	m := new(SubToMessagesByChatIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatRpcClient) SubToChats(ctx context.Context, in *SubToChatsRequest, opts ...grpc.CallOption) (ChatRpc_SubToChatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatRpc_ServiceDesc.Streams[1], ChatRpc_SubToChats_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRpcSubToChatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatRpc_SubToChatsClient interface {
	Recv() (*SubToChatsResponse, error)
	grpc.ClientStream
}

type chatRpcSubToChatsClient struct {
	grpc.ClientStream
}

func (x *chatRpcSubToChatsClient) Recv() (*SubToChatsResponse, error) {
	m := new(SubToChatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatRpcClient) WriteMessageByChatId(ctx context.Context, in *WriteMessageByChatIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatRpc_WriteMessageByChatId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) DeleteMessageByChatId(ctx context.Context, in *DeleteMessageByChatIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatRpc_DeleteMessageByChatId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRpcServer is the server API for ChatRpc service.
// All implementations should embed UnimplementedChatRpcServer
// for forward compatibility
type ChatRpcServer interface {
	// GetChats
	//
	// Возвращает список чатов, которые есть у пользователя
	GetChats(context.Context, *GetChatsRequest) (*GetChatsResponse, error)
	// LoadChatByChatId
	//
	// Возвращает чат по id чата
	LoadChatByChatId(context.Context, *LoadChatByChatIdRequest) (*LoadChatByChatIdResponse, error)
	// LoadMoreChats
	//
	// Загружает больше чатов, если надо, может загружать как вверх так и вниз
	LoadMoreChats(context.Context, *LoadMoreChatsRequest) (*LoadMoreChatsResponse, error)
	// LoadMoreMessagesByChatId
	//
	// Загружает больше сообщений если надо, может загружать сообщения вверх и вниз
	LoadMoreMessagesByChatId(context.Context, *LoadMoreMessagesByChatIdRequest) (*LoadMoreMessagesByChatIdResponse, error)
	// SubToMessages
	//
	// Подписывается на обновления сообщений, в ответе возвращаются значения значения сообщений которые
	// новые и могут быть получены новым пользовтелем
	SubToMessagesByChatId(*SubToMessagesByChatIdRequest, ChatRpc_SubToMessagesByChatIdServer) error
	// SubToChats
	//
	// Подписывается на обновление чатов, в ответе возвращается статистика по чатам и последнее сообщение, которое надо
	// отобразить, а также количество не прочитанных сообщений
	SubToChats(*SubToChatsRequest, ChatRpc_SubToChatsServer) error
	// WriteMessageByChatId
	//
	// Написать сообщение
	WriteMessageByChatId(context.Context, *WriteMessageByChatIdRequest) (*emptypb.Empty, error)
	// DeleteMessageByChatId
	//
	// Удалить сообщение (удаляет сообщение у всех, восстановить нельзя)
	DeleteMessageByChatId(context.Context, *DeleteMessageByChatIdRequest) (*emptypb.Empty, error)
}

// UnimplementedChatRpcServer should be embedded to have forward compatible implementations.
type UnimplementedChatRpcServer struct {
}

func (UnimplementedChatRpcServer) GetChats(context.Context, *GetChatsRequest) (*GetChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedChatRpcServer) LoadChatByChatId(context.Context, *LoadChatByChatIdRequest) (*LoadChatByChatIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadChatByChatId not implemented")
}
func (UnimplementedChatRpcServer) LoadMoreChats(context.Context, *LoadMoreChatsRequest) (*LoadMoreChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMoreChats not implemented")
}
func (UnimplementedChatRpcServer) LoadMoreMessagesByChatId(context.Context, *LoadMoreMessagesByChatIdRequest) (*LoadMoreMessagesByChatIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMoreMessagesByChatId not implemented")
}
func (UnimplementedChatRpcServer) SubToMessagesByChatId(*SubToMessagesByChatIdRequest, ChatRpc_SubToMessagesByChatIdServer) error {
	return status.Errorf(codes.Unimplemented, "method SubToMessagesByChatId not implemented")
}
func (UnimplementedChatRpcServer) SubToChats(*SubToChatsRequest, ChatRpc_SubToChatsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubToChats not implemented")
}
func (UnimplementedChatRpcServer) WriteMessageByChatId(context.Context, *WriteMessageByChatIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMessageByChatId not implemented")
}
func (UnimplementedChatRpcServer) DeleteMessageByChatId(context.Context, *DeleteMessageByChatIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageByChatId not implemented")
}

// UnsafeChatRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRpcServer will
// result in compilation errors.
type UnsafeChatRpcServer interface {
	mustEmbedUnimplementedChatRpcServer()
}

func RegisterChatRpcServer(s grpc.ServiceRegistrar, srv ChatRpcServer) {
	s.RegisterService(&ChatRpc_ServiceDesc, srv)
}

func _ChatRpc_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_GetChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).GetChats(ctx, req.(*GetChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_LoadChatByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadChatByChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).LoadChatByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_LoadChatByChatId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).LoadChatByChatId(ctx, req.(*LoadChatByChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_LoadMoreChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadMoreChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).LoadMoreChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_LoadMoreChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).LoadMoreChats(ctx, req.(*LoadMoreChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_LoadMoreMessagesByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadMoreMessagesByChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).LoadMoreMessagesByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_LoadMoreMessagesByChatId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).LoadMoreMessagesByChatId(ctx, req.(*LoadMoreMessagesByChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_SubToMessagesByChatId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubToMessagesByChatIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatRpcServer).SubToMessagesByChatId(m, &chatRpcSubToMessagesByChatIdServer{stream})
}

type ChatRpc_SubToMessagesByChatIdServer interface {
	Send(*SubToMessagesByChatIdResponse) error
	grpc.ServerStream
}

type chatRpcSubToMessagesByChatIdServer struct {
	grpc.ServerStream
}

func (x *chatRpcSubToMessagesByChatIdServer) Send(m *SubToMessagesByChatIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatRpc_SubToChats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubToChatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatRpcServer).SubToChats(m, &chatRpcSubToChatsServer{stream})
}

type ChatRpc_SubToChatsServer interface {
	Send(*SubToChatsResponse) error
	grpc.ServerStream
}

type chatRpcSubToChatsServer struct {
	grpc.ServerStream
}

func (x *chatRpcSubToChatsServer) Send(m *SubToChatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatRpc_WriteMessageByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMessageByChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).WriteMessageByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_WriteMessageByChatId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).WriteMessageByChatId(ctx, req.(*WriteMessageByChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_DeleteMessageByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageByChatIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).DeleteMessageByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_DeleteMessageByChatId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).DeleteMessageByChatId(ctx, req.(*DeleteMessageByChatIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRpc_ServiceDesc is the grpc.ServiceDesc for ChatRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatRpc",
	HandlerType: (*ChatRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChats",
			Handler:    _ChatRpc_GetChats_Handler,
		},
		{
			MethodName: "LoadChatByChatId",
			Handler:    _ChatRpc_LoadChatByChatId_Handler,
		},
		{
			MethodName: "LoadMoreChats",
			Handler:    _ChatRpc_LoadMoreChats_Handler,
		},
		{
			MethodName: "LoadMoreMessagesByChatId",
			Handler:    _ChatRpc_LoadMoreMessagesByChatId_Handler,
		},
		{
			MethodName: "WriteMessageByChatId",
			Handler:    _ChatRpc_WriteMessageByChatId_Handler,
		},
		{
			MethodName: "DeleteMessageByChatId",
			Handler:    _ChatRpc_DeleteMessageByChatId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubToMessagesByChatId",
			Handler:       _ChatRpc_SubToMessagesByChatId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubToChats",
			Handler:       _ChatRpc_SubToChats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
