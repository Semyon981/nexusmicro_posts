// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: storage.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Storage_MultipartUploadVideo_FullMethodName = "/Storage/MultipartUploadVideo"
	Storage_MultipartUploadPhoto_FullMethodName = "/Storage/MultipartUploadPhoto"
	Storage_MultipartUploadFile_FullMethodName  = "/Storage/MultipartUploadFile"
	Storage_Upload_FullMethodName               = "/Storage/Upload"
	Storage_GetAttachments_FullMethodName       = "/Storage/GetAttachments"
)

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	MultipartUploadVideo(ctx context.Context, opts ...grpc.CallOption) (Storage_MultipartUploadVideoClient, error)
	MultipartUploadPhoto(ctx context.Context, opts ...grpc.CallOption) (Storage_MultipartUploadPhotoClient, error)
	MultipartUploadFile(ctx context.Context, opts ...grpc.CallOption) (Storage_MultipartUploadFileClient, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	// GetAttachments
	//
	// Возвращает список вложений по иx id.
	GetAttachments(ctx context.Context, in *GetAttachmentsRequest, opts ...grpc.CallOption) (*GetAttachmentsResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) MultipartUploadVideo(ctx context.Context, opts ...grpc.CallOption) (Storage_MultipartUploadVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[0], Storage_MultipartUploadVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageMultipartUploadVideoClient{stream}
	return x, nil
}

type Storage_MultipartUploadVideoClient interface {
	Send(*MultipartUploadAnyRequest) error
	Recv() (*MultipartUploadAnyResponse, error)
	grpc.ClientStream
}

type storageMultipartUploadVideoClient struct {
	grpc.ClientStream
}

func (x *storageMultipartUploadVideoClient) Send(m *MultipartUploadAnyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageMultipartUploadVideoClient) Recv() (*MultipartUploadAnyResponse, error) {
	m := new(MultipartUploadAnyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) MultipartUploadPhoto(ctx context.Context, opts ...grpc.CallOption) (Storage_MultipartUploadPhotoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[1], Storage_MultipartUploadPhoto_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageMultipartUploadPhotoClient{stream}
	return x, nil
}

type Storage_MultipartUploadPhotoClient interface {
	Send(*MultipartUploadAnyRequest) error
	Recv() (*MultipartUploadAnyResponse, error)
	grpc.ClientStream
}

type storageMultipartUploadPhotoClient struct {
	grpc.ClientStream
}

func (x *storageMultipartUploadPhotoClient) Send(m *MultipartUploadAnyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageMultipartUploadPhotoClient) Recv() (*MultipartUploadAnyResponse, error) {
	m := new(MultipartUploadAnyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) MultipartUploadFile(ctx context.Context, opts ...grpc.CallOption) (Storage_MultipartUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[2], Storage_MultipartUploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageMultipartUploadFileClient{stream}
	return x, nil
}

type Storage_MultipartUploadFileClient interface {
	Send(*MultipartUploadAnyRequest) error
	Recv() (*MultipartUploadAnyResponse, error)
	grpc.ClientStream
}

type storageMultipartUploadFileClient struct {
	grpc.ClientStream
}

func (x *storageMultipartUploadFileClient) Send(m *MultipartUploadAnyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageMultipartUploadFileClient) Recv() (*MultipartUploadAnyResponse, error) {
	m := new(MultipartUploadAnyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, Storage_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetAttachments(ctx context.Context, in *GetAttachmentsRequest, opts ...grpc.CallOption) (*GetAttachmentsResponse, error) {
	out := new(GetAttachmentsResponse)
	err := c.cc.Invoke(ctx, Storage_GetAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations should embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	MultipartUploadVideo(Storage_MultipartUploadVideoServer) error
	MultipartUploadPhoto(Storage_MultipartUploadPhotoServer) error
	MultipartUploadFile(Storage_MultipartUploadFileServer) error
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	// GetAttachments
	//
	// Возвращает список вложений по иx id.
	GetAttachments(context.Context, *GetAttachmentsRequest) (*GetAttachmentsResponse, error)
}

// UnimplementedStorageServer should be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) MultipartUploadVideo(Storage_MultipartUploadVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method MultipartUploadVideo not implemented")
}
func (UnimplementedStorageServer) MultipartUploadPhoto(Storage_MultipartUploadPhotoServer) error {
	return status.Errorf(codes.Unimplemented, "method MultipartUploadPhoto not implemented")
}
func (UnimplementedStorageServer) MultipartUploadFile(Storage_MultipartUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method MultipartUploadFile not implemented")
}
func (UnimplementedStorageServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedStorageServer) GetAttachments(context.Context, *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachments not implemented")
}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_MultipartUploadVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).MultipartUploadVideo(&storageMultipartUploadVideoServer{stream})
}

type Storage_MultipartUploadVideoServer interface {
	Send(*MultipartUploadAnyResponse) error
	Recv() (*MultipartUploadAnyRequest, error)
	grpc.ServerStream
}

type storageMultipartUploadVideoServer struct {
	grpc.ServerStream
}

func (x *storageMultipartUploadVideoServer) Send(m *MultipartUploadAnyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageMultipartUploadVideoServer) Recv() (*MultipartUploadAnyRequest, error) {
	m := new(MultipartUploadAnyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_MultipartUploadPhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).MultipartUploadPhoto(&storageMultipartUploadPhotoServer{stream})
}

type Storage_MultipartUploadPhotoServer interface {
	Send(*MultipartUploadAnyResponse) error
	Recv() (*MultipartUploadAnyRequest, error)
	grpc.ServerStream
}

type storageMultipartUploadPhotoServer struct {
	grpc.ServerStream
}

func (x *storageMultipartUploadPhotoServer) Send(m *MultipartUploadAnyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageMultipartUploadPhotoServer) Recv() (*MultipartUploadAnyRequest, error) {
	m := new(MultipartUploadAnyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_MultipartUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).MultipartUploadFile(&storageMultipartUploadFileServer{stream})
}

type Storage_MultipartUploadFileServer interface {
	Send(*MultipartUploadAnyResponse) error
	Recv() (*MultipartUploadAnyRequest, error)
	grpc.ServerStream
}

type storageMultipartUploadFileServer struct {
	grpc.ServerStream
}

func (x *storageMultipartUploadFileServer) Send(m *MultipartUploadAnyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageMultipartUploadFileServer) Recv() (*MultipartUploadAnyRequest, error) {
	m := new(MultipartUploadAnyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_GetAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetAttachments(ctx, req.(*GetAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Storage_Upload_Handler,
		},
		{
			MethodName: "GetAttachments",
			Handler:    _Storage_GetAttachments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultipartUploadVideo",
			Handler:       _Storage_MultipartUploadVideo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MultipartUploadPhoto",
			Handler:       _Storage_MultipartUploadPhoto_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MultipartUploadFile",
			Handler:       _Storage_MultipartUploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "storage.proto",
}
