// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: posts.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Posts_NewPost_FullMethodName         = "/Posts/NewPost"
	Posts_GetPostsList_FullMethodName    = "/Posts/GetPostsList"
	Posts_GetPostsUser_FullMethodName    = "/Posts/GetPostsUser"
	Posts_AddLike_FullMethodName         = "/Posts/AddLike"
	Posts_DeleteLike_FullMethodName      = "/Posts/DeleteLike"
	Posts_WriteComment_FullMethodName    = "/Posts/WriteComment"
	Posts_GetCommentsList_FullMethodName = "/Posts/GetCommentsList"
	Posts_UpdatePost_FullMethodName      = "/Posts/UpdatePost"
	Posts_GetPostById_FullMethodName     = "/Posts/GetPostById"
)

// PostsClient is the client API for Posts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsClient interface {
	// NewPost
	//
	// Создает новый пост.
	NewPost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostResponse, error)
	// GetPostsList
	//
	// Возвращает список всех постов. Отсортирован по дате. Сначала новые.
	GetPostsList(ctx context.Context, in *GetPostsListRequest, opts ...grpc.CallOption) (*GetPostsListResponse, error)
	// GetPostsUser
	//
	// Возвращает список постов пользователя. Отсортирован по дате. Сначала новые.
	GetPostsUser(ctx context.Context, in *GetPostsUserRequest, opts ...grpc.CallOption) (*GetPostsUserResponse, error)
	// AddLike
	//
	// Ставит лайк на пост.
	AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error)
	// DeleteLike
	//
	// Удаляет лайк с поста.
	DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*DeleteLikeResponse, error)
	// WriteComment
	//
	// Позволяет написать комментарий к посту.
	WriteComment(ctx context.Context, in *WriteCommentRequest, opts ...grpc.CallOption) (*WriteCommentResponse, error)
	// GetCommentsList
	//
	// Возвращает список комментариев под постом. Отсортирован по дате. Направление сортировки зависит от параметра sort_dir. false - сначала новые (по умолчанию), true - сначала старые.
	GetCommentsList(ctx context.Context, in *GetCommentsListRequest, opts ...grpc.CallOption) (*GetCommentsListResponse, error)
	// UpdatePost
	//
	// Изменяет пост. (Не реализовано).
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	// GetPostById
	//
	// Получить пост по id
	GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...grpc.CallOption) (*GetPostByIdResponse, error)
}

type postsClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsClient(cc grpc.ClientConnInterface) PostsClient {
	return &postsClient{cc}
}

func (c *postsClient) NewPost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostResponse, error) {
	out := new(NewPostResponse)
	err := c.cc.Invoke(ctx, Posts_NewPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetPostsList(ctx context.Context, in *GetPostsListRequest, opts ...grpc.CallOption) (*GetPostsListResponse, error) {
	out := new(GetPostsListResponse)
	err := c.cc.Invoke(ctx, Posts_GetPostsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetPostsUser(ctx context.Context, in *GetPostsUserRequest, opts ...grpc.CallOption) (*GetPostsUserResponse, error) {
	out := new(GetPostsUserResponse)
	err := c.cc.Invoke(ctx, Posts_GetPostsUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error) {
	out := new(AddLikeResponse)
	err := c.cc.Invoke(ctx, Posts_AddLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*DeleteLikeResponse, error) {
	out := new(DeleteLikeResponse)
	err := c.cc.Invoke(ctx, Posts_DeleteLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) WriteComment(ctx context.Context, in *WriteCommentRequest, opts ...grpc.CallOption) (*WriteCommentResponse, error) {
	out := new(WriteCommentResponse)
	err := c.cc.Invoke(ctx, Posts_WriteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetCommentsList(ctx context.Context, in *GetCommentsListRequest, opts ...grpc.CallOption) (*GetCommentsListResponse, error) {
	out := new(GetCommentsListResponse)
	err := c.cc.Invoke(ctx, Posts_GetCommentsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, Posts_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsClient) GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...grpc.CallOption) (*GetPostByIdResponse, error) {
	out := new(GetPostByIdResponse)
	err := c.cc.Invoke(ctx, Posts_GetPostById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsServer is the server API for Posts service.
// All implementations should embed UnimplementedPostsServer
// for forward compatibility
type PostsServer interface {
	// NewPost
	//
	// Создает новый пост.
	NewPost(context.Context, *NewPostRequest) (*NewPostResponse, error)
	// GetPostsList
	//
	// Возвращает список всех постов. Отсортирован по дате. Сначала новые.
	GetPostsList(context.Context, *GetPostsListRequest) (*GetPostsListResponse, error)
	// GetPostsUser
	//
	// Возвращает список постов пользователя. Отсортирован по дате. Сначала новые.
	GetPostsUser(context.Context, *GetPostsUserRequest) (*GetPostsUserResponse, error)
	// AddLike
	//
	// Ставит лайк на пост.
	AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error)
	// DeleteLike
	//
	// Удаляет лайк с поста.
	DeleteLike(context.Context, *DeleteLikeRequest) (*DeleteLikeResponse, error)
	// WriteComment
	//
	// Позволяет написать комментарий к посту.
	WriteComment(context.Context, *WriteCommentRequest) (*WriteCommentResponse, error)
	// GetCommentsList
	//
	// Возвращает список комментариев под постом. Отсортирован по дате. Направление сортировки зависит от параметра sort_dir. false - сначала новые (по умолчанию), true - сначала старые.
	GetCommentsList(context.Context, *GetCommentsListRequest) (*GetCommentsListResponse, error)
	// UpdatePost
	//
	// Изменяет пост. (Не реализовано).
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	// GetPostById
	//
	// Получить пост по id
	GetPostById(context.Context, *GetPostByIdRequest) (*GetPostByIdResponse, error)
}

// UnimplementedPostsServer should be embedded to have forward compatible implementations.
type UnimplementedPostsServer struct {
}

func (UnimplementedPostsServer) NewPost(context.Context, *NewPostRequest) (*NewPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPost not implemented")
}
func (UnimplementedPostsServer) GetPostsList(context.Context, *GetPostsListRequest) (*GetPostsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsList not implemented")
}
func (UnimplementedPostsServer) GetPostsUser(context.Context, *GetPostsUserRequest) (*GetPostsUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsUser not implemented")
}
func (UnimplementedPostsServer) AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedPostsServer) DeleteLike(context.Context, *DeleteLikeRequest) (*DeleteLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedPostsServer) WriteComment(context.Context, *WriteCommentRequest) (*WriteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteComment not implemented")
}
func (UnimplementedPostsServer) GetCommentsList(context.Context, *GetCommentsListRequest) (*GetCommentsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsList not implemented")
}
func (UnimplementedPostsServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostsServer) GetPostById(context.Context, *GetPostByIdRequest) (*GetPostByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostById not implemented")
}

// UnsafePostsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServer will
// result in compilation errors.
type UnsafePostsServer interface {
	mustEmbedUnimplementedPostsServer()
}

func RegisterPostsServer(s grpc.ServiceRegistrar, srv PostsServer) {
	s.RegisterService(&Posts_ServiceDesc, srv)
}

func _Posts_NewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).NewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_NewPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).NewPost(ctx, req.(*NewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetPostsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetPostsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_GetPostsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetPostsList(ctx, req.(*GetPostsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetPostsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetPostsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_GetPostsUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetPostsUser(ctx, req.(*GetPostsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_AddLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).AddLike(ctx, req.(*AddLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_DeleteLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).DeleteLike(ctx, req.(*DeleteLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_WriteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).WriteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_WriteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).WriteComment(ctx, req.(*WriteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetCommentsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetCommentsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_GetCommentsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetCommentsList(ctx, req.(*GetCommentsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Posts_GetPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServer).GetPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Posts_GetPostById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServer).GetPostById(ctx, req.(*GetPostByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Posts_ServiceDesc is the grpc.ServiceDesc for Posts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Posts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Posts",
	HandlerType: (*PostsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewPost",
			Handler:    _Posts_NewPost_Handler,
		},
		{
			MethodName: "GetPostsList",
			Handler:    _Posts_GetPostsList_Handler,
		},
		{
			MethodName: "GetPostsUser",
			Handler:    _Posts_GetPostsUser_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _Posts_AddLike_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _Posts_DeleteLike_Handler,
		},
		{
			MethodName: "WriteComment",
			Handler:    _Posts_WriteComment_Handler,
		},
		{
			MethodName: "GetCommentsList",
			Handler:    _Posts_GetCommentsList_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Posts_UpdatePost_Handler,
		},
		{
			MethodName: "GetPostById",
			Handler:    _Posts_GetPostById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posts.proto",
}
